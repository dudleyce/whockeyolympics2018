---
title: "2018 Winter Olympics Women's Hockey Data Project"
author: "Claire Dudley"
date: "2024-11-19"
output: ioslides_presentation
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)

library(tidyverse)
library(knitr)
library(kableExtra)
library(ggforce)
library(cowplot)
library(gridExtra)

source("plot_rink.R")

olympic_data <- read_csv('olympic_womens_dataset.csv')

olympic_only <-
  olympic_data %>%
  filter(str_detect(`Home Team`, "Olympic"))

olympic_only <-
  olympic_only %>%
  filter(game_date < "2019-01-01")

xmin <- 154
xmax <- 184
ymin <- 35.5
ymax <- 49.5

olympic_only <-
  olympic_only %>%
  mutate(IsSlotShot = ifelse(
    `X Coordinate` >= xmin & `X Coordinate` <= xmax &
      `Y Coordinate` >= ymin & `Y Coordinate` <= ymax, 
    1,
    0
  ),
  IsSlotPass = ifelse(
    `X Coordinate 2` >= xmin & `X Coordinate` <= xmax &
      `Y Coordinate 2` >= ymin & `Y Coordinate` <= ymax, 
    1,
    0
  )
  )

player_data <- olympic_only %>%
  group_by(Player, Team) %>%
  summarize(
    Total_Shots = sum(Event == "Shot", na.rm = TRUE),
    Goals = sum(Event == "Goal", na.rm = TRUE),
    Assists = sum(Player == "Player 2" & Event %in% c("Goal", "Play"), na.rm = TRUE), # Count assists
    Total_Points = Goals + Assists,
    Passes = sum(Event == "Play", na.rm = TRUE),
    Incomplete_Passes = sum(Event == "Incomplete Play", na.rm = TRUE),
    Takeaways = sum(Event == "Takeaway", na.rm = TRUE),
    Puck_Recoveries = sum(Event == "Puck Recovery", na.rm = TRUE),
    Dump_Ins = sum(Event == "Zone Entry" & `Detail 1` == "Dumped"),
    Dump_Outs = sum(Event == "Dump Out", na.rm = TRUE),
    Zone_Entries = sum(Event == "Zone Entry" & `Detail 1` == "Carried"),
    Faceoff_Wins = sum(Event == "Faceoff Win", na.rm = TRUE),
    Penalties_Taken = sum(Event == "Penalty Taken", na.rm = TRUE),
    Shot_Traffic = sum(Event == "Shot" & "Detail 3" == "true", na.rm = TRUE),
    Shot_OneTimers = sum(Event == "Shot" & "Detail 4" == "true", na.rm = TRUE),
  ) %>%
  ungroup()

olympic_only <- 
  olympic_only %>%
  mutate(
    PPGF_home = ifelse((Event == "Goal" & `Home Team` == Team & `Home Team Skaters` > `Away Team Skaters` ), TRUE, FALSE) ,
    PPGF_away = ifelse((Event == "Goal" & `Away Team` == Team & `Away Team Skaters` > `Home Team Skaters` ), TRUE, FALSE),
    PPshots_home = ifelse((Event == "Shot" & `Home Team` == Team & `Home Team Skaters` > `Away Team Skaters` ), TRUE, FALSE),
    PPshots_away =  ifelse((Event == "Shot" & `Away Team` == Team & `Away Team Skaters` > `Home Team Skaters` ), TRUE, FALSE),
    PPslotshots_home = ifelse((IsSlotShot == 1 & `Home Team` == Team & `Home Team Skaters` > `Away Team Skaters`), TRUE, FALSE),
    PPslotshots_away = ifelse((IsSlotShot == 1 & `Away Team` == Team & `Away Team Skaters` > `Home Team Skaters`), TRUE, FALSE),
    penalties_home = ifelse(Event == "Penalty Taken" & `Home Team` == Team, TRUE, FALSE),
    penalties_away = ifelse(Event == "Penalty Taken" & `Away Team` == Team, TRUE, FALSE),
    PP_recoveries_home = ifelse(`X Coordinate` < 50 & Event == "Puck Recovery" &  `Home Team` == Team & `Home Team Skaters` > `Away Team Skaters`, TRUE, FALSE),
    PP_recoveries_away = ifelse(`X Coordinate` < 50 & Event == "Puck Recovery" &  `Away Team` == Team & `Away Team Skaters` > `Home Team Skaters`, TRUE, FALSE)
  )

game_data <- 
  olympic_only %>%
  group_by(game_date, `Home Team`, `Away Team`) %>%
  summarise(
    HomeGoals = sum(Event == "Goal" & `Home Team` == Team),
    AwayGoals = sum(Event == "Goal" & `Away Team` == Team),
    HomePP_goals = sum(PPGF_home),
    AwayPP_goals = sum(PPGF_away),
    HomePP_shots = sum(PPshots_home),
    AwayPP_shots = sum(PPshots_away),
    HomePPSlotShots = sum(PPslotshots_home),
    AwayPPSlotShots = sum(PPslotshots_away),
    Home_penalties = sum(penalties_home),
    Away_penalties = sum(penalties_away),
    Home_recoveries = sum(PP_recoveries_home),
    Away_recoveries = sum(PP_recoveries_away),
    .groups = "drop")

game_data <- game_data %>%
  mutate(
    Home_opposing_penalties = Away_penalties,
    Away_opposing_penalties = Home_penalties
  )

long_data <- game_data %>%
  pivot_longer(
    cols = c(HomeGoals, AwayGoals, HomePP_goals, AwayPP_goals, HomePP_shots, AwayPP_shots, HomePPSlotShots, AwayPPSlotShots,
             Home_recoveries, Away_recoveries,
             Home_opposing_penalties, Away_opposing_penalties),
    names_to = c("Type", ".value"),
    names_pattern = "(Home|Away)(.*)"
  ) %>% ungroup()

long_data <- long_data %>%
  mutate(
    Team = ifelse(Type == "Home", `Home Team`, `Away Team`),
    Opposing_penalties = ifelse(Type == "Home", Away_penalties, Home_penalties)  # Map opposing penalties explicitly
  ) %>%
  select(game_date, Team, Goals, PP_goals, Opposing_penalties, PP_shots, PPSlotShots, `_recoveries`) 

pp_data <- long_data %>%
  mutate(
    PP_success_percentage = ifelse(Opposing_penalties > 0, (PP_goals / Opposing_penalties) * 100, 0)
  )

pp_data2 <-
  pp_data %>%
  group_by(Team) %>%
  summarise(
    Goals = sum(Goals),
    "PP goals" = sum(PP_goals),
    Opportunities = sum(Opposing_penalties),
    PP_shots = sum(PP_shots),
    PP_slot_shots = sum(PPSlotShots),
    recoveries = sum(`_recoveries`)
  )

canada_powerplay <-
  olympic_only %>%
  filter((`Home Team` == "Olympic (Women) - Canada" & `Home Team Skaters` > `Away Team Skaters` |
           `Away Team` == "Olympic (Women) - Canada" & `Away Team Skaters` > `Home Team Skaters`))  %>%
  filter(`Home Team Skaters` != 6,
         `Away Team Skaters` != 6)

canada_pp_shots = canada_powerplay %>%
  filter(Event %in% c("Shot", "Goal")) %>%
  filter(Team == "Olympic (Women) - Canada") %>%
  mutate(event_successful = ifelse(Event == "Goal", TRUE, FALSE))

non_canada_pp <-
  olympic_only %>%
  filter((`Home Team` != "Olympic (Women) - Canada" & `Home Team Skaters` > `Away Team Skaters` |
            `Away Team` != "Olympic (Women) - Canada" & `Away Team Skaters` > `Home Team Skaters`))  %>%
  filter(`Home Team Skaters` != 6,
         `Away Team Skaters` != 6) %>%
  mutate(TeamOnPP = ifelse(`Home Team Skaters` > `Away Team Skaters`, `Home Team`, `Away Team`))

non_canada_pp_shots <- 
  non_canada_pp %>%
  filter(Event %in% c("Shot", "Goal")) %>%
  mutate(event_successful = ifelse(Event == "Goal", TRUE, FALSE))

canada_pp_passing <-
  canada_powerplay %>%
  filter(Event == "Play" | Event == "Incomplete Play",
         Team == "Olympic (Women) - Canada") %>%
  mutate(TeamOnPP = "Olympic (Women) - Canada")

non_canada_pp_passing <-
  non_canada_pp %>%
  filter(Event == "Play" | Event == "Incomplete Play",
         Team == TeamOnPP)
  
all_pp_plays <-
  rbind(canada_pp_passing, non_canada_pp_passing)

zone_entries <- 
  olympic_only %>%
  filter(Event == "Zone Entry",
         `Home Team Skaters` == 5 & `Away Team Skaters` == 5)

zone_entry_d <-
  zone_entries %>%
  group_by(`Player 2`) %>%
  summarise(
    Carries = sum(`Detail 1` == "Carried", na.rm = TRUE),
    Dumped = sum(`Detail 1` == "Dumped", na.rm = TRUE),
    Played = sum(`Detail 1` == "Played", na.rm = TRUE)
  ) %>%
  mutate(Total = Carries + Dumped + Played,
         Percent_Carries = Carries/Total,
         Percent_Played = Played / Total)

entry_denials <-
  olympic_only %>%
  mutate(EntryDenial = ifelse((Event == "Dump In/Out" & `Detail 1` == "Lost") |
                               ( Event == "Zone Entry" & `Detail 1` == "Played" & lead(Team) != Team),
         TRUE, FALSE))

entry_denials <-
  entry_denials %>%
  mutate(OffensiveEntry = ifelse(Event == "Zone Entry" & 
                                   (lead(Event) == "Play" | lead(Event) == "Shot" | lead(Event) == "Goal")
                                 & lead(Team) == Team, TRUE, FALSE),
         DefendingTeam = ifelse(Team == `Home Team`, `Away Team`, `Home Team`))

canada_entry <- 
  entry_denials %>%
  filter(
    `Home Team` == "Olympic (Women) - Canada" | `Away Team` == "Olympic (Women) - Canada",
    Team != "Olympic (Women) - Canada")

entry_denials_only <-
  entry_denials %>%
  filter(EntryDenial == TRUE,
        `Home Team` == "Olympic (Women) - Canada" | `Away Team` == "Olympic (Women) - Canada",
        Team != "Olympic (Women) - Canada")

offensive_entries_only <-
  entry_denials %>%
  filter(OffensiveEntry == TRUE,
         `Home Team` == "Olympic (Women) - Canada" | `Away Team` == "Olympic (Women) - Canada",
         Team != "Olympic (Women) - Canada")
```

## Overview

- Data and Tools Used
- Top 10 Most Valuable Players of the Tournament
- Powerplay Analysis
- Entry Defense Analysis

## Data Used

- Only used the data from games in the 2018 Olympic Tournament
- 5 games in the data:

```{r}
  olympic_only %>%
  distinct(game_date, `Home Team`, `Away Team`) %>% 
  kable() %>%
  kable_styling(font_size = 12)
```

## Tools/Language Used

- All coding was done in R, including this presentation
- Cleaning was dependent on the question being asked. Depending on if the question was player/team related, I grouped by the target group and summed event values.


## Note

- Canada is featured in every game in the dataset, so the data is more of a representation of Canada in the 2018 Winter Olympics than everyone
- This is important to consider when determining the "top players of the tournament" - the top players from this dataset will intuitively be from Team Canada as they are featured in the data 5 times

## Top 10 Players: Determining Value

- Goals scored
- Passes: an indicator of how often they touched the puck (better players will be on the ice more often and they will be more involved in play)
- Puck recoveries: give defensive information
- Zone entries: show possession
- Passing accuracy: since we do not have an assist stat, give information on how accurate of a playmaker


## Top 10 Players

```{r out.width= "50%"}
  player_data %>%
  mutate(
    Shooting_Accuracy = Goals /Total_Shots,
    Passing_Accuracy = Passes / (Passes + Incomplete_Passes)
  ) %>%
    dplyr::select(Player, Team, Goals, Passes, Puck_Recoveries, Zone_Entries, Passing_Accuracy) %>%
  arrange(desc(Goals), desc(Passes), desc(Puck_Recoveries), desc(Zone_Entries), 
          desc(Passing_Accuracy)) %>%
    head(10) %>%
  kable(caption = "Top 10 Players by Goals and Other Metrics") %>% kable_styling(font_size = 7)
```


## Best Teams on the Powerplay

```{r}
  pp_data2 %>%
  mutate("Success Rate" = `PP goals` / Opportunities,
         "Shots" = PP_shots / Opportunities,
         "Recoveries" = recoveries / Opportunities,
         "Slot Shots" = PP_slot_shots / Opportunities) %>%
  dplyr::select(Team, "Success Rate", "PP goals", "Slot Shots", Opportunities, Recoveries, "Shots") %>%
  arrange(desc(`Success Rate`)) %>%
  kable() %>% 
  kable_styling(font_size = 12)
```

- Canada had the highest success rate on the powerplay, going 4/29
- The U.S. was the only other team to score on the powerplay, going 1/11

## What makes a team successful on the powerplay?

- Producing: having a higher success rate
- Maintaining possession in the offensive zone - notably, Canada had to recover the puck in their defensive zone fewer than the other teams in the tournament. Teams on the PK that can't clear the puck become more tired and vulnerable without the ability to change
- Shooting from dangerous areas: Canada had more slot shots per opportunity even if they had lower shot volume

## Shot Locations on the PP

```{r, warning=FALSE}
canada_plot <- plot_rink(ggplot(canada_pp_shots)) +
  stat_density_2d(aes(x = `X Coordinate`, y = `Y Coordinate`, fill = ..density..), geom = "raster", contour = FALSE, alpha = 0.8) +
  scale_fill_viridis_c(option = "A") +
  labs(fill = "Shot Density", title = "Canada PP Shots") +
  theme_minimal()

non_canada_plot <- plot_rink(ggplot(non_canada_pp_shots)) +
  stat_density_2d(aes(x = `X Coordinate`, y = `Y Coordinate`, fill = ..density..), geom = "raster", contour = FALSE, alpha = 0.8) +
  scale_fill_viridis_c(option = "A") +
  labs(fill = "Shot Density", title = "Non-Canada PP Shots") +
  theme_minimal()

# Arrange plots vertically
grid.arrange(canada_plot, non_canada_plot, ncol = 1)
```

## Passing on the PP

- Having a low turnover rate on the powerplay is important
- Interestingly, Canada had a lower success rate on completed passes while on the powerplay:

```{r}
  all_pp_plays %>%
  group_by(Team) %>%
  summarise(
    Passes = sum(Event == "Play", na.rm = TRUE),
    Incomplete_Passes = sum(Event == "Incomplete Play", na.rm = TRUE)
  ) %>%
  mutate(Passing_success_rate = Passes / (Passes + Incomplete_Passes)) %>%
  arrange(desc(Passing_success_rate)) %>%
  kable()%>% 
  kable_styling(font_size = 12)
```

## Where were teams passing from?

-  X and Y coordinates for the origin of passes give us an idea of where key players on the powerplay are

```{r, warning=FALSE}

canada_complete_pp_passes <- canada_pp_passing %>%
  filter(Event == "Play", 
         `X Coordinate` > 125)

canada_plot <- plot_rink(ggplot(canada_complete_pp_passes)) +
  stat_density_2d(aes(x = `X Coordinate`, y = `Y Coordinate`, fill = ..density..), geom = "raster", contour = FALSE, alpha = 0.6) +
  scale_fill_viridis_c(option = "A") +
  labs(fill = "Pass Origin Density", title = "Canada Passing Origins on the PP") +
  theme_minimal()

non_canada_complete_pp_passes <- non_canada_pp_passing %>%
  filter(Event == "Play",
         `X Coordinate` > 125) 

non_canada_plot <- plot_rink(ggplot(non_canada_complete_pp_passes)) +
  stat_density_2d(aes(x = `X Coordinate`, y = `Y Coordinate`, fill = ..density..), geom = "raster", contour = FALSE, alpha = 0.6) +
  scale_fill_viridis_c(option = "A") +  
  labs(fill = "Pass Origin Density", title = "Non-Canada Passing Origins on the PP") +
  theme_minimal()


grid.arrange(canada_plot, non_canada_plot, ncol = 1)

  
```

## Takeaways

- Canada's average formation looks different than the other teams' "average" - looks like they have someone alone at the point, maybe more of a 1-2-2. 
- Other teams are using the outside and the boards more, maybe in an overload depending on their unit.
- Canada has a slightly lower success rate on their passes, perhaps in attempts to get shots from more dangerous areas
- Canada has to recover the puck in their defensive zone less frequently than their opponents


## Entry Denial Analysis

- In the current setup of the data, we have an Event called "Zone Entry" with 3 possible results, or "details": Carried, Dumped, and Played

- We can start by looking at what defenders have the fewest percentage of carried zone entries against and which defenders are more likely to play the puck carrier

## Fewest Carries Against

```{r}
# lowest percentage of carries against
zone_entry_d %>%
  arrange(Percent_Carries) %>%
  head(10) %>%
  kable() %>%
  kable_styling(font_size = 10)
```

## Highest Percentage of Zone Entries Played

```{r}
zone_entry_d %>%
  arrange(desc(Percent_Played)) %>%
  head(10) %>%
  kable() %>%
  kable_styling(font_size = 10)
```

## What About Players Who Gain Possession After a Zone Entry?

```{r}
zone_entry_events <-
  olympic_only %>%
  filter(Event == "Zone Entry" | lag(Event) == "Zone Entry") %>%
  mutate(Defender = ifelse(Event == "Zone Entry", `Player 2`, lag(`Player 2`)),
         Diff_team = ifelse(Team == lag(Team), FALSE, TRUE)) %>%
  filter(Event != "Zone Entry")

zone_entry_events %>%
  group_by(Defender) %>%
  summarise(
    Gained_Possession = sum(Diff_team),
    Appearances = n(),
    Gained_Possession_Percent = Gained_Possession / Appearances
  ) %>%
  arrange(desc(Gained_Possession_Percent)) %>%
  head(10) %>%
  kable() %>%
  kable_styling(font_size = 10)
```

## Quantifying Tradeoff Between Denying Entries and Limiting Opponent Offense

- Defining an entry denial as a failed dump in (excluding icings) or an entry denial that is played by the defender and the next possession is the defender's team. Entry Denial Rate = EDR

- Defining an offensive zone entry as one where the next event is a play or shot in the offensive zone by the puck carrying team. Offensive Entries Allowed Rate = OER

- Tradeoff = EDR - OER

## Looking at Teams' Tradeoffs

```{r}
entry_denials %>%
  filter(Event == "Zone Entry" | Event == "Dump In/Out",
         `X Coordinate` > 100) %>%
  group_by(DefendingTeam) %>%
  summarise(
    OffensiveEntriesAllowed = sum(OffensiveEntry),
    EntryDenials = sum(EntryDenial),
    TotalEntriesAgainst = n()
  ) %>%
  mutate(EDR = EntryDenials / TotalEntriesAgainst,
         OER = OffensiveEntriesAllowed / TotalEntriesAgainst,
         Tradeoff = EDR - OER) %>%
  arrange(desc(Tradeoff)) %>%
  dplyr::select(-OffensiveEntriesAllowed, -EntryDenials) %>%
  kable() %>%
  kable_styling(font_size = 10)
```
- The U.S. has a high entry denial rate and a lower offensive entry rate

- Canada has a much higher offensive entry rate, causing their negative tradeoff value

- We can define here that an "acceptable" tradeoff value exists around 0. Positive is good, negative is not.

## Nature of Canada's Entry Defense

```{r}
ggplot() +
  geom_histogram(data = offensive_entries_only, 
                 aes(x = `Y Coordinate`, fill = "Offensive Entries"), 
                 alpha = 0.5, bins = 30) +
  geom_histogram(data = entry_denials_only, 
                 aes(x = `Y Coordinate`, fill = "Entry Denials"), 
                 alpha = 0.5, bins = 30) +
  labs(title = "Canada's Offensive Zone Entries Against vs. Entry Denials Blue Line Frequency",
       x = "Y Coordinate",
       y = "Frequency",
       fill = "Category") +  # Legend title
  theme_minimal()
```


